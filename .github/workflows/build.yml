name: android gcc builds

on: [push]

env:
  NDK_VERSION: 28c

jobs:
  prepare_ndk:
    runs-on: ubuntu-latest
    steps:
      - name: cache ndk
        uses: actions/cache@v4
        id: ndk-cache
        with:
          path: /opt/ndk
          key: ${{ runner.os }}-ndk-r${{ env.NDK_VERSION }}
          restore-keys: ${{ runner.os }}-ndk-

      - name: download ndk
        run: |
            if [ ! -d "/opt/ndk/" ]; then
              # 下载NDK
              wget -q https://dl.google.com/android/repository/android-ndk-r$NDK_VERSION-linux.zip
              unzip -q android-ndk-r$NDK_VERSION-linux.zip -d /opt/
              mv /opt/android-ndk-r$NDK_VERSION /opt/ndk
              echo "ANDROID_NDK_HOME=/opt/ndk" >> $GITHUB_ENV
            fi
        if: steps.ndk-cache.outputs.cache-hit != 'true'

      - name: check clang
        run: |
          /opt/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ -v


  build_android_extra:
    strategy:
      fail-fast: false
      matrix:
        build_type: [RelWithDebInfo]
        target_abi: [arm64-v8a, armeabi-v7a, x86_64, x86]
    runs-on: ubuntu-latest
    needs: [prepare_ndk]
    steps:
      - name: restore ndk
        uses: actions/cache@v4
        with:
          path: /opt/ndk
          key: ${{ runner.os }}-ndk-r${{ env.NDK_VERSION }}

      - name: clone libandroid-extra
        run: |
          git clone https://github.com/yxj-github-437/libandroid-extra.git libandroid-extra-src
      
      - name: set build dir
        id: strings
        shell: bash
        run: echo "build-output-dir=${{ github.workspace }}/libandroid-extra-build" >> "$GITHUB_OUTPUT"

      - name : configure cmake
        run: >
          cmake -S libandroid-extra-src
          -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DANDROID_PLATFORM=android-21
          -DANDROID_ABI=${{ matrix.target_abi }}
          --toolchain /opt/ndk/build/cmake/android.toolchain.cmake
          -DCMAKE_C_FLAGS="-D__ANDROID_UNAVAILABLE_SYMBOLS_ARE_WEAK__=1"
          -DCMAKE_CXX_FLAGS="-D__ANDROID_UNAVAILABLE_SYMBOLS_ARE_WEAK__=1"
          -GNinja

      - name: build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}



