name: android gcc release builds

on:
  push:
    tags:
      - "gcc-*"

env:
  NDK_VERSION: 28c
  LIBANDROID_COMMIT_ID: fa86e7a13986555784cec893088f6e5950da9a02

jobs:
  split-tag:
    runs-on: ubuntu-latest
    outputs:
      gcc-version: ${{ steps.get-gcc-version.outputs.version }}
    steps:
      - id: get-gcc-version
        run: echo "version=$(echo ${{ github.ref_name }} | cut -d- -f2)" >> $GITHUB_OUTPUT

  prepare_ndk:
    runs-on: ubuntu-latest
    steps:
      - name: cache ndk
        uses: actions/cache@v4
        id: ndk-cache
        with:
          path: /opt/ndk
          key: ${{ runner.os }}-ndk-r${{ env.NDK_VERSION }}
          restore-keys: ${{ runner.os }}-ndk-

      - name: download ndk
        run: |
            # 下载NDK
            wget -q https://dl.google.com/android/repository/android-ndk-r$NDK_VERSION-linux.zip
            unzip -q android-ndk-r$NDK_VERSION-linux.zip -d /opt/
            mv /opt/android-ndk-r$NDK_VERSION /opt/ndk
        if: steps.ndk-cache.outputs.cache-hit != 'true'

      - name: check clang
        run: |
          /opt/ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/clang++ -v


  build_android_extra:
    strategy:
      fail-fast: false
      matrix:
        build_type: [RelWithDebInfo]
        target_abi: [arm64-v8a, armeabi-v7a, x86_64, x86]
    runs-on: ubuntu-latest
    needs: [prepare_ndk]
    steps:
      - name: cache sysroot
        uses: actions/cache@v4
        id: sysroot-cache
        with:
          path: /opt/android-build/sysroot
          key: ${{ runner.os }}-sysroot-${{ matrix.target_abi }}-${{ env.LIBANDROID_COMMIT_ID }}
          restore-keys: ${{ runner.os }}-sysroot-${{ matrix.target_abi }}-

      - name: restore ndk
        uses: actions/cache@v4
        with:
          path: /opt/ndk
          key: ${{ runner.os }}-ndk-r${{ env.NDK_VERSION }}
        if: steps.sysroot-cache.outputs.cache-hit != 'true'

      - name: checkout libandroid-extra
        uses: actions/checkout@v5
        with:
          repository: yxj-github-437/libandroid-extra
          path: libandroid-extra-src
        if: steps.sysroot-cache.outputs.cache-hit != 'true'

      - name: build
        run: |
          cd libandroid-extra-src && git checkout ${{ env.LIBANDROID_COMMIT_ID }}
          cmake -B ${{ github.workspace }}/libandroid-extra-build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DANDROID_PLATFORM=android-21 -DANDROID_ABI=${{ matrix.target_abi }} \
            -DANDROID_ARM_MODE=arm \
            --toolchain /opt/ndk/build/cmake/android.toolchain.cmake \
            --install-prefix /opt/android-build \
            -GNinja
          cmake --build ${{ github.workspace }}/libandroid-extra-build --config ${{ matrix.build_type }}
          cmake --install ${{ github.workspace }}/libandroid-extra-build

          if [[ ${{ matrix.target_abi }} == x86_64 ]]; then
            rm -rf ${{ github.workspace }}/libandroid-extra-build
            cmake -B ${{ github.workspace }}/libandroid-extra-build \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DANDROID_PLATFORM=android-21 -DANDROID_ABI=x86 \
              --toolchain /opt/ndk/build/cmake/android.toolchain.cmake \
              --install-prefix /opt/android-build \
              -GNinja
            cmake --build ${{ github.workspace }}/libandroid-extra-build --config ${{ matrix.build_type }}
            cmake --install ${{ github.workspace }}/libandroid-extra-build
          fi
        if: steps.sysroot-cache.outputs.cache-hit != 'true'



  build_gcc:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            target: aarch64-linux-android,
            target_abi: arm64-v8a
          }
          - {
            target: arm-linux-androideabi,
            target_abi: armeabi-v7a
          }
          - {
            target: x86_64-linux-android,
            target_abi: x86_64
          }
          - {
            target: i686-linux-android,
            target_abi: x86
          }
    runs-on: ubuntu-latest
    needs: [prepare_ndk, build_android_extra]
    steps:
      - name: restore sysroot
        uses: actions/cache@v4
        with:
          path: /opt/android-build/sysroot
          key: ${{ runner.os }}-sysroot-${{ matrix.config.target_abi }}-${{ env.LIBANDROID_COMMIT_ID }}
          restore-keys: ${{ runner.os }}-sysroot-${{ matrix.config.target_abi }}-

      - name: install system build tools
        run: |
            sudo apt-get update && \
              sudo apt-get install -y gettext gdc llvm lld libgmp-dev libmpfr-dev libmpc-dev libisl-dev

      - name: checkout code
        uses: actions/checkout@v5

      - name: build
        run: |
          ./build.sh --base-dir=/opt/ --jobs=4 --gcc-version=${{ needs.split-tag.outputs.gcc-version }} --binutils-version=2.44 \
            --target=${{ matrix.config.target }} --host=${{ matrix.config.target }}

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.target }}-gcc
          path: /opt/gcc-install/*.tar.xz

  release:
    runs-on: ubuntu-latest
    needs: build_gcc

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        path: ./
        merge-multiple: true

    - name: Upload to Release
      id: upload_to_release
      uses: softprops/action-gh-release@v1
      with:
        files: "*.tar.xz"
